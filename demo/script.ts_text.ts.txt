
// for video
// window size 1080
// UI compact mode, 100% zoom
// see obs screenshots etc 10/4 2024

// non-video zoom vscode and
// Control + Left Arrow: Switch to the space on the left.
// or just switch apps

// 1 terminal window, worker nodemon
// disable github copilot
// workflows0.ts
// npm run start.watch
// npm run workflow

// ### INTRO
// Today I'm going to walk you through creating a Temporal Workflow
// .. for a sample -- eCommerce Order Fulfillment use case

// I'm going to do this in Temporal's Typescript SDK

// Once we create the workflow, I'll show you some common failure scenarios
// .. and how Temporal handles them gracefully

// Then I'll add some interactivity in the workflow, with a human-in-the-loop scenario
// And add some asynchronous logic to show you how Temporal can handle complex use cases with ease

// I have some mocked out Temporal Activities to ... processPayment..
// These are the steps I want each order to go through
// Now I just need to add these steps to my blank workflow, OrderFulfillWorkflow
// So let's begin!

// Let's run this workflow!

// Workflow here

// 1 happy
    const paymentResult = await processPayment(order);
    const inventoryResult = await reserveInventory(order);
    const deliveryResult = await deliverOrder(order);
    return `Order fulfilled: ${paymentResult}, ${inventoryResult}, ${deliveryResult}`;
    // show starter.ts
    // npm run workflow
    // Now I have introduced some delays in my mock API calls, so the workflow will take a few seconds to complete
    // SHOW worker, stop worker!
    // API downtime inventory comment out
    // UNDO API inventory
    // Invalid order
    	starter.ts: "12/25" -> "12/23"
    // nonretryable error type
    //// bug in workflow (undo quantity change)
    	throw new Error("workflow bug!")
/// 2
    // UNDO cc 12/23
    import { proxyActivities, defineSignal, setHandler, condition }
    ///
    const { requireApproval, .. ACTIVITY
    /// outside wf
    export const approveOrder = defineSignal('approveOrder');
    /// inside wf
    let isApproved = false;
    setHandler(approveOrder, () => { isApproved = true; });

    if (await requireApproval(order)) {
        await condition(() => isApproved);
    }
    // set quantity 10000
    // SHOW worker, stop worker!
    // unhappy -> happy
/// 3
    import sleep, ApplicationFailure
    /// take AWAIT out of condition
    if (await requireApproval(order)) {
	    const approvalOrTimeout = Promise.race([
	      condition(() => isApproved),
	      sleep(30000).then(() => { throw new ApplicationFailure('Approval timed out'); })
	    ]);

	    await approvalOrTimeout;
  	}
    // undo 10000 headphones
/// 4 stretch goal demo
	npm run workflow -- --numOrders 50 --invalidPercentage 20
	api.ts uncomment bug fix
/// Back to slides




